#!/usr/bin/python3 -u


import sys
import socket
from time import time
import datetime
import select
import json

from base64 import b64encode
from window import Window 

LOG_WINDOW = "logger/log_window"
MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 1   # timeout value for each segment inside window
SEQUENCE = 0  # keep track of last sequence number inside the buffer (window)
SEQ_SENT = 0  # keep track of first sequence number inside the buffer (window)

class Sender:
  '''
  Sender Class encapsulates methods for transfering data to receiver.
  '''
  def __init__ (self, udp_ip, udp_port):
    # Record ip address and port number of the receiver
    self.dest = (udp_ip, udp_port)
    # Set up the UDP socket
    self.sock = socket.socket (socket.AF_INET, socket.SOCK_DGRAM) 
    self.sock.settimeout(0)
    # Initialize sender window (aka sender buffer)
    self.window = Window (segment_size=DATA_SIZE, max_size=1, timeout=TIMEOUT)

  def log(self, msg):
    log_msg = datetime.datetime.now().strftime("%H:%M:%S.%f") + " 4254send: " + msg + "\n"
    sys.stderr.write (log_msg)

  def readData (self):
    # Read data from STDIN
    return sys.stdin.buffer.read (DATA_SIZE)

  def sendSegment (self, seq_no):
    data = self.window.get (seq_no)
    if not data:
      self.log("-----------[error] Unexpected seq no:" + str (seq_no))
      return
    # Add headers to data
    msg = json.dumps({"sequence": seq_no, "data": b64encode(data).decode(), "eof": False})
    # Send sequence number + eof flag + data 
    if self.sock.sendto (msg.encode (), self.dest) < len (msg):
      self.log("[error] unable to fully send packet")
    else:
      self.log("[send data] %d (%d)" % (seq_no, len (data)))

  def sendNextSegment (self, data):
    global SEQUENCE
    
    # Store the data inside the window
    self.window.add (SEQUENCE, data)
    # Update sequence number to next expected byte position to read 
    SEQUENCE += len (data)

  def recvAck (self):
    return self.sock.recv (MSG_SIZE)

  def sendEOF (self):
    end_msg = json.dumps({"eof": True, "data": "", "sequence": SEQUENCE})
    # Send eof 
    if self.sock.sendto (end_msg.encode (), self.dest) < len (end_msg):
      self.log("[error] unable to fully send packet")
    else:
      self.log("[send eof] %d" % SEQUENCE)
  
  def retransmit (self, seq_no=None):
    # retransmit given sequence 
    if seq_no != None:
      self.sendSegment (seq_no)
      self.window.resetRTO (seq_no)
      return

    # retransmit all expired segments inside the window
    # by rewinding SEQ_SENT to first expired sequence
    global SEQ_SENT
    expired_seq = self.window.expiredSegment ()

    if expired_seq != None:
      # Multiplicative decrease window size
      self.window.shrinkWindow ()
      self.log("Shrinking Window size to: " + str (self.window.max_size))
      # rewind SEQ_SENT
      SEQ_SENT = expired_seq


def main (ip, port):
  global SEQ_SENT
  # Find IP and port number from command line argument
  UDP_IP = ip
  UDP_PORT = port
  # Initialize destination (ip address and port) 
  sender = Sender (UDP_IP, UDP_PORT) 

  curr_ack = 0 
  duplicate_ack_count = 0
  NEXT_RTT = 0
  timeout = time () + TIMEOUT 
  # Now read in data, then send segments until there is no more data
  # to read from STDIN and window is empty
  data = sender.readData ()
  while len (data) > 0 or not sender.window.isEmpty ():
    
    # Add the next segment in line to the window if the window is not full 
    if not sender.window.isFull ():
      if len (data) > 0:
        sender.sendNextSegment (data)
        data = sender.readData ()
      else:
        sender.window.shrinkWindow ()
        sender.log("Shrinking Window size to: " + str (sender.window.max_size))

    else:
      if SEQ_SENT < curr_ack + sender.window.max_size * DATA_SIZE:
        # Send the segment: starting from (seq_no) to (seq_no + DATA_SIZE) bytes
        sender.sendSegment (SEQ_SENT)
        SEQ_SENT += DATA_SIZE

      curr_time = time ()
      if curr_time > NEXT_RTT:
        NEXT_RTT = curr_time + 0.04
        # Additive increase window size
        sender.window.growWindow ()
        sender.log("Growing Window size to: " + str (sender.window.max_size))


    # Check if next ACK in line have arrived to free space inside window
    ack = None
    try:
      ack = sender.recvAck ()
    # If no ACKs arrives for a while, retransmit any expired segments inside
    # the window
    except socket.error:
      if ack == None:
        curr_time = time ()
        if curr_time > timeout:
          sender.log("---------Timeout----------")
          sender.retransmit ()
          timeout = curr_time + TIMEOUT
        continue

    # Process received ACK
    try:
      ack_num = int (ack.decode ())
      sender.log("[recv ack] " + str(ack_num))
      
      # Remove all segments that have sequence number 
      # less than or equal to ack number from the window (cumulative ACKs).
      sender.window.remove (ack_num)

    except (ValueError, KeyError, TypeError):
      sender.log("[recv corrupt packet]")
    
    # keep track of duplicate ack
    if curr_ack != ack_num:
      curr_ack = ack_num
      duplicate_ack_count = 1 
      if SEQ_SENT < curr_ack + 1:
        SEQ_SENT = curr_ack + 1;
    else:
      duplicate_ack_count += 1

    # Fast retransmit/recovery
    if duplicate_ack_count >= 4:
      sender.window.shrinkWindow ()
      sender.log("Shrinking Window size to: " + str (sender.window.max_size))
      sender.retransmit (ack_num + 1)
      duplicate_ack_count = 1 


  # At this point sender have sent all segments successfully
  # Send EOF until receiver ACK that EOF got processed
  eof_send_count = 0
  sender.sendEOF ()
  while True:
    ack = None
    try:
      ack = sender.recvAck ()
    except socket.error:
      if not ack:
        curr_time = time ()
        if curr_time > timeout:
          # If receiver have not responded for a long time, assume it is already closed
          if eof_send_count >= 10:
            break
          # Otherwise, resend EOF
          sender.sendEOF ()
          eof_send_count += 1
        continue

    ack_num = int (ack.decode ())
    if ack_num == SEQUENCE:
      sender.log("[recv eof] " + str(ack_num))
      break
    sender.log("[recv ack] " + str(ack_num))

  sender.window.writeLog (LOG_WINDOW)
  sys.exit(0)


if __name__ == '__main__':
  # command line argument syntax checking
  if len (sys.argv) != 2 or ":" not in sys.argv[1]:
    sys.stderr.write ("Usage: 4254send <recv_host>:<recv_port>\n")
    sys.exit (-1)

  argv = sys.argv[1].split (":")
  try:
    ip = argv[0]
    port = int (argv[1])
  except ValueError:
    sys.stderr.write ("Usage: 4254send <recv_host>:<recv_port>\n")
    sys.exit (-1)

  # call main function 
  main (ip, port)
