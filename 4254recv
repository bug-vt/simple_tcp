#!/usr/bin/python3 -u


import sys
import socket
import time
import datetime
import select
import json

from base64 import b64decode
from window import Window


MSG_SIZE = 1500
TIMEOUT = 30
SEQUENCE = 0

class Receiver:
  def __init__ (self, udp_ip, udp_port):
    # Set up the socket
    self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
    self.sock.bind((udp_ip, udp_port))
    self.sock.settimeout(TIMEOUT)
    # Initialize sender window
    # Receiver window have no upper bound nor timeout
    self.window = Window ()

    # Get port we bound to
    self.log("[bound] " + str (self.sock.getsockname ()[1]))

  def log(self, msg):
    log_msg = datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + msg + "\n"
    sys.stderr.write (log_msg)

  def recvSegment (self):
    (segment, addr) = self.sock.recvfrom (MSG_SIZE)
    self.sender_addr = addr

    decoded = json.loads(segment.decode())
    seq_no = decoded['sequence'] 
    # Ignore duplicate segment or segment that have been processed already
    if (seq_no < SEQUENCE or self.window.get (seq_no) != None):
      return
    self.window.add (seq_no, decoded) 

  def processInOrder (self):
    global SEQUENCE
    # Deliver all the in-order segments up to the next hole (missing
    # segment) of the sequence inside the receiver window.
    while True:
      try:
        # Remove next sequence from window if exists 
        delivered = self.window.remove (SEQUENCE)
        # Reached next hole
        if len (delivered) == 0:
          break 

        delivered = delivered[0]

        # If the EOF flag is set, exit
        if (delivered['eof']):
          self.log("[completed]")
          sys.exit(0)

        # If there is data, we accept it and print it out
        # note, data is bytes, so we must convert back to string before use
        if (delivered['data']):
          data = b64decode(delivered['data'].encode())
          self.log("[recv data] " + str(delivered['sequence']) + " (" + str(len(data)) + ") ACCEPTED (in-order)")
          sys.stdout.buffer.write(data)
          # Update sequence number to next expected byte position to process
          SEQUENCE += len(data)

      except (ValueError, KeyError, TypeError) as e:
        self.log("[recv corrupt packet]")
        raise e

  def sendAck (self, ack_no):
    msg = json.dumps({"ack": ack_no})
    self.log("ABOUT TO SEND " + msg)
    return self.sock.sendto (msg.encode(), self.sender_addr) < len(msg)
    


def main (argv):
  # Bind to localhost and an ephemeral port
  UDP_IP = "127.0.0.1"
  UDP_PORT = int(sys.argv[1])
  # Initialize address of the receiver
  receiver = Receiver (UDP_IP, UDP_PORT)

  # Now listen for segments.
  # Receiver stores received segment into window,
  # then read next in-order segment from the window if any.
  while True:
    try:
      receiver.recvSegment()
    # If nothing is ready, we hit the timeout
    except socket.timeout:
      receiver.log("[error] timeout")
      sys.exit(-1)
    
    receiver.processInOrder ()
    # Send back an cumulative ACK to the sender
    if receiver.sendAck (SEQUENCE):
      receiver.log("[error] unable to fully send packet")


if __name__ == '__main__':
  main (sys.argv)
