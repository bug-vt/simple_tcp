#!/usr/bin/python3 -u


import sys
import socket
import time
import datetime
import select
import json

from base64 import b64decode


MSG_SIZE = 1500
TIMEOUT = 30

class Receiver:
  def __init__ (self, udp_ip, udp_port):
    # Set up the socket
    self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
    self.sock.bind((udp_ip, udp_port))
    self.sock.settimeout(TIMEOUT)

    # Get port we bound to
    self.log("[bound] " + str (self.sock.getsockname ()[1]))

  def log(self, msg):
    log_msg = datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + msg + "\n"
    sys.stderr.write (log_msg)

  def recvSegment (self):
    (data, addr) = self.sock.recvfrom (MSG_SIZE)
    self.sender_addr = addr
    return (data, addr)

  def sendAck (self, ack_no):
    msg = json.dumps({"ack": ack_no})
    self.log("ABOUT TO SEND " + msg)
    return self.sock.sendto (msg.encode(), self.sender_addr) < len(msg)
    

def main (argv):
  # Bind to localhost and an ephemeral port
  UDP_IP = "127.0.0.1"
  UDP_PORT = int(sys.argv[1])

  receiver = Receiver (UDP_IP, UDP_PORT)

  # Now listen for packets
  while True:
    try:
      result = receiver.recvSegment()
    # If nothing is ready, we hit the timeout
    except socket.timeout:
      receiver.log("[error] timeout")
      sys.exit(-1)

    (data, addr) = result # note, data is bytes, so we must convert back to string before use

    try:
      decoded = json.loads(data.decode())

      # If the EOF flag is set, exit
      if (decoded['eof']):
        receiver.log("[completed]")
        sys.exit(0)

      # If there is data, we accept it and print it out
      if (decoded['data']):
        data = b64decode(decoded['data'].encode())
        # If we receive data, we assume it's in-order
        # You will need to do much more here
        receiver.log("[recv data] " + str(decoded['sequence']) + " (" + str(len(data)) + ") ACCEPTED (in-order)")
        sys.stdout.buffer.write(data)

      # Send back an ack to the sender
      if receiver.sendAck (decoded['sequence'] + len(data)):
        receiver.log("[error] unable to fully send packet")

    except (ValueError, KeyError, TypeError) as e:
      receiver.log("[recv corrupt packet]")
      raise e


if __name__ == '__main__':
  main (sys.argv)
